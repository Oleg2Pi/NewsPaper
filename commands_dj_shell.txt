>>> from news.models import *
Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> User.objects.create_user('Иван')
>>> User.objects.create_user('Николай') 
>>> user1 = User.objects.all()[0]
>>> user2 = User.objects.all()[1]
Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(user_id = user1) 
>>> Author.objects.create(user_id = user2)
Добавить 4 категории в модель Category.
>>> Category.objects.create(name = 'Спорт') 
>>> Category.objects.create(name = 'Наука')
>>> Category.objects.create(name = 'Образование') 
>>> Category.objects.create(name = 'Политика') 
>>> author1 = Author.objects.all()[0]
>>> author2 = Author.objects.all()[1]
Добавить 2 статьи и 1 новость.
>>> new = Post.objects.create(author=author1) 
>>> article1 = Post.objects.create(author=author2, position=article)
>>> article2 = Post.objects.create(author=author2, position=article) 
Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> PostCategory.objects.create(post=new, category=Category.objects.get(pk=1))
>>> PostCategory.objects.create(post=article1, category=Category.objects.get(pk=2))
>>> PostCategory.objects.create(post=article1, category=Category.objects.get(pk=3)) 
>>> PostCategory.objects.create(post=article2, category=Category.objects.get(pk=4)) 
Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> Comment.objects.create(post=new, user=user1) 
>>> Comment.objects.create(post=new, user=user2) 
>>> Comment.objects.create(post=article1, user=user1) 
>>> Comment.objects.create(post=article2, user=user1)
Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> new.like()
>>> new.like()
>>> article1.like() 
>>> article1.like()
>>> article1.like()
>>> article2.like()
>>> Comment.objects.filter(post=1)[0].like()
>>> Comment.objects.filter(post=1)[0].like()
>>> Comment.objects.filter(post=1)[0].like()
>>> Comment.objects.filter(post=1)[0].dislike() 
>>> Comment.objects.filter(post=1)[0].dislike()
>>> Comment.objects.filter(post=1)[0].like()    
>>> Comment.objects.filter(post=1)[1].like() 
>>> Comment.objects.filter(post=2)[0].like() 
>>> Comment.objects.filter(post=2)[0].like()
>>> Comment.objects.filter(post=2)[0].like()
>>> Comment.objects.filter(post=2)[0].like()
>>> Comment.objects.filter(post=2)[0].like()
>>> Comment.objects.filter(post=2)[0].like()
>>> Comment.objects.filter(post=3)[0].like() 
>>> Comment.objects.filter(post=3)[0].like()
>>> Comment.objects.filter(post=3)[0].dislike() 
Обновить рейтинги пользователей.
>>> author1.update_rating()
>>> author1.rating
>>> author2.update_rating() 
>>> author2.rating 
Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> height_rating = Author.objects.all().order_by('-rating')[0]
>>> height_rating.user.username, height_rating.rating   
Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> better_post = Post.objects.all().order_by('-rating')[0] 
>>> better_post.time_create
>>> better_post.author.user.username
>>> better_post.rating
>>> better_post.title
>>> better_post.preview() 
Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.   
>>> com_bet_post = better_post.comment_set.all()[0] 
>>> com_bet_post.time_create
>>> com_bet_post.user.username
>>> com_bet_post.rating 
>>> com_bet_post.text  